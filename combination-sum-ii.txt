class Solution {
public:
	void dfs(vector<int>& candidates, int target, vector<vector<int>>& res, vector<int>& r, int i)
	{
		if (target < 0) {return;}
		else
		{
			if (target == 0)
			{
				res.push_back(r);
			}
			else
			{
				int pre = -1;
				for (int j = i; j < candidates.size(); j++)
				{
					if (candidates[j] != pre)
					{
						r.push_back(candidates[j]);
						dfs(candidates,target - candidates[j],res,r,j+1);
						r.pop_back();
						pre = candidates[j];
					}
				}
			}
		}
	}
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
		vector<int> r;
		if (candidates.empty()) return res;
		sort(candidates.begin(), candidates.end());
		dfs(candidates,target,res,r,0);
		return res;
    }
};